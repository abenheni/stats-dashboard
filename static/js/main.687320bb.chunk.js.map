{"version":3,"sources":["components/Reducers/StudyReducer.js","components/Contexts/StudyContext.js","components/Reducers/ParticipantReducer.js","components/Contexts/ParticipantContext.js","components/Pages/Participant/ParticipantPage.js","components/Firebase.js","components/api/StudyApi.js","components/api/ParticipantApi.js","components/Pages/Participant/AddParticipant.js","components/utils/StudyChartUtils.js","components/Pages/Study/StudyPage.js","components/Pages/User/UserPage.js","components/Pages/Login.js","components/routerSwitch.js","components/SideBar/index.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["StudyReducer","state","action","type","isFetching","newState","studies","push","study","newStudies","filter","title","StudyContext","createContext","initialContext","StudyContextProvider","props","useReducer","dispatch","Provider","value","studyDispatch","children","ParticipantReducer","participants","participant","newParticipants","id","ParticipantContext","ParticipantContextProvider","participantDispatch","ParticipantPage","firebaseConfig","apiKey","authDomain","databaseURL","firebase","length","database","fetchStudies","a","ref","once","then","snapshot","val","studyList","fetchParticipants","participantList","addParticipant","set","forEach","element","defaults","coughs","dateJoined","name","survey","AddParticipant","studyId","match","params","studyid","useContext","useState","values","setValues","history","useHistory","handleChange","field","updatedValues","Container","Segment","Form","onSubmit","e","valuesWithId","uuidv1","preventDefault","Field","required","Label","Input","placeholder","onChange","target","label","Button","getDeviceNumberChart","startDate","dateSet","Set","add","devicePerDate","date","Object","keys","map","key","number","StudyPage","currentStudy","currentParticipants","includes","useEffect","onClick","width","height","data","startingDate","dataKey","stroke","strokeDasharray","Table","celled","Header","HeaderCell","Body","row","Row","Cell","UserPage","renderRow","studyTitle","selectable","Login","RouterSwitch","exact","path","render","matchProps","SideBar","redirectTo","link","Menu","pointing","vertical","Item","to","MainComponent","Group","horizontal","App","className","Main","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.687320bb.chunk.js","sourcesContent":["const StudyReducer = (state, action) => {\r\n    switch(action.type) {\r\n        case 'FETCH_STUDIES':\r\n            return { ...state, isFetching: true }\r\n        case 'FETCH_STUDIES_SUCCESS':\r\n            {const newState = state;\r\n            newState.studies = action.studies;\r\n            return { ...newState, isFetching: false }}\r\n        case 'FETCH_STUDIES_FAILURE':\r\n            return { ...state, isFetching: false }\r\n        case 'ADD_SURVEY':\r\n            {const newState = state;\r\n            newState.studies.push(action.study)\r\n            return newState;}\r\n        case 'REMOVE_SURVEY':\r\n            {const newState = state;\r\n            const newStudies = newState.studies.filter(study => study.title !== action.title)\r\n            newState['studies'] = newStudies;\r\n            return newState;}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default StudyReducer;","import React, { createContext, useContext, useReducer } from 'react';\r\nimport StudyReducer from '../Reducers/StudyReducer';\r\n\r\nexport const StudyContext = createContext();\r\n\r\nconst initialContext = {\r\n    isFetching: true,\r\n    studies: []\r\n};\r\n\r\nconst StudyContextProvider = (props) => {\r\n    const [studies, dispatch] = useReducer(StudyReducer, initialContext);\r\n\r\n    return (\r\n        <StudyContext.Provider value={{studies, studyDispatch: dispatch}}>\r\n            {props.children}\r\n        </StudyContext.Provider>\r\n    )\r\n}\r\n\r\nexport default StudyContextProvider;","const ParticipantReducer = (state, action) => {\r\n    switch(action.type) {\r\n        case 'FETCH_PARTICIPANTS':\r\n            return { ...state, isFetching: true }\r\n        case 'FETCH_PARTICIPANTS_SUCCESS':\r\n            {const newState = state;\r\n            newState.participants = action.participants;\r\n            return { ...newState, isFetching: false }}\r\n        case 'FETCH_PARTICIPANTS_FAILURE':\r\n            return { ...state, isFetching: false }\r\n        case 'ADD_PARTICIPANT':\r\n            {const newState = state;\r\n            newState.participants.push(action.participant)\r\n            return newState;}\r\n        case 'REMOVE_PARTICIPANT':\r\n            {const newState = state;\r\n            const newParticipants = newState.participants.filter(participant => participant.id !== action.id)\r\n            newState['participants'] = newParticipants;\r\n            return newState;}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default ParticipantReducer;","import React, { createContext, useContext, useReducer } from 'react';\r\nimport ParticipantReducer from '../Reducers/ParticipantReducer';\r\n\r\nexport const ParticipantContext = createContext();\r\n\r\nconst initialContext = {\r\n    isFetching: true,\r\n    participants: []\r\n};\r\n\r\nconst ParticipantContextProvider = (props) => {\r\n    const [participants, dispatch] = useReducer(ParticipantReducer, initialContext)\r\n\r\n    return (\r\n        <ParticipantContext.Provider value={{ participants, participantDispatch: dispatch }}>\r\n            {props.children}\r\n        </ParticipantContext.Provider>\r\n    )\r\n}\r\n\r\nexport default ParticipantContextProvider;","import React from 'react';\r\n\r\nconst ParticipantPage = () => {\r\n    return(\r\n        <div>\r\n            <p>PARTICIPANT PAGE</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ParticipantPage;","import * as firebase from 'firebase/app';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD6hs3mo2Xhj2XLN5Xy75A-GVQLnIbBXZo\",\r\n    authDomain: \"cough-detection.firebaseapp.com\",\r\n    databaseURL: \"https://cough-detection.firebaseio.com/\",\r\n  }\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default !firebase.apps.length ? firebase.initializeApp(firebaseConfig) : firebase.app();","import firebase from '../Firebase';\r\nimport 'firebase/database';\r\n\r\nconst database = firebase.database();\r\n\r\nexport const fetchStudies = async () => {\r\n    const studyList = await database.ref('/studies').once('value').then((snapshot) => {\r\n        return snapshot.val()\r\n    });\r\n    return studyList;\r\n}","import firebase from '../Firebase';\r\nimport 'firebase/database';\r\nimport { fetchStudies } from './StudyApi';\r\n\r\nconst database = firebase.database();\r\n\r\nexport const fetchParticipants = async () => {\r\n    const participantList = await database.ref('/participants').once('value').then((snapshot) => {\r\n        return snapshot.val()\r\n    })\r\n    return participantList;\r\n}\r\n\r\nexport const addParticipant = async (participant) => {\r\n    const participantList = await fetchParticipants();\r\n    participantList.push(participant);\r\n    database.ref('/participants').set(participantList);\r\n    const studies = await fetchStudies();\r\n    studies.forEach(element => {\r\n        if (element.title === participant.study) element.participants.push(participant.id)\r\n    });\r\n    database.ref('/studies').set(studies);\r\n}","import React, { useContext, useState } from 'react';\r\nimport { ParticipantContext } from '../../Contexts/ParticipantContext';\r\nimport {v1 as uuidv1} from 'uuid';\r\nimport { addParticipant } from '../../api/ParticipantApi';\r\nimport { Container, Segment, Form, Button, Label, Input } from 'semantic-ui-react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst defaults = {\r\n    coughs: [],\r\n    dateJoined: '2020-04-10',\r\n    id: '',\r\n    name: 'John Doe',\r\n    survey: ''\r\n}\r\n\r\nconst AddParticipant = (props) => {\r\n    const studyId = props.match.params.studyid;\r\n    const { participantDispatch } = useContext(ParticipantContext);\r\n    const [values, setValues] = useState(defaults);\r\n    const history = useHistory();\r\n\r\n    const handleSubmit = (e) => {\r\n        const valuesWithId = {...values};\r\n        valuesWithId['id'] = uuidv1();\r\n        valuesWithId['study'] = studyId;\r\n        e.preventDefault();\r\n        participantDispatch({type: 'ADD_PARTICIPANT', participant: {\r\n            valuesWithId\r\n        }})\r\n        addParticipant(valuesWithId);\r\n        setValues(defaults);\r\n        history.push(`/study/${studyId}`);\r\n    }\r\n\r\n    const handleChange = (field, value) => {\r\n        const updatedValues = {...values};\r\n        updatedValues[field] = value;\r\n        setValues(updatedValues);\r\n    }\r\n\r\n    return(\r\n        <Container>\r\n            <Segment>\r\n                <p>ADDING PARTICIPANT TO STUDY: {studyId}</p>\r\n            </Segment>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Field required>\r\n                    <Label>Name</Label>\r\n                <Input type='text' placeholder='name' value={values.name} \r\n                    onChange={(e) => handleChange('name', e.target.value)} required />\r\n                </Form.Field>\r\n                <Form.Field required>\r\n                    <Label>Date</Label>\r\n                <Input label='(YYYY-MM-DD)' type='text' placeholder='date' value={values.dateJoined} \r\n                    onChange={(e) => handleChange('dateJoined', e.target.value)} required />\r\n                </Form.Field>\r\n                <Button type='submit'>Add Participant</Button>\r\n            </Form>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default AddParticipant;","export const getDeviceNumberChart = (startDate, participantList) => {\r\n    const dateSet = new Set([]);\r\n    participantList.forEach(element => {\r\n        dateSet.add(element.dateJoined)\r\n    });\r\n    const devicePerDate = {};\r\n    devicePerDate[startDate] = 0;\r\n    dateSet.forEach(date => {\r\n        devicePerDate[date] = 0;\r\n    })\r\n    participantList.forEach(element => {\r\n        devicePerDate[element.dateJoined]++;\r\n    })\r\n    const dpdArray = Object.keys(devicePerDate).map(key => {\r\n        return {date: key, number: devicePerDate[key]}\r\n    })\r\n    return dpdArray;\r\n}","import React, { useContext, useEffect } from 'react';\r\nimport { StudyContext } from '../../Contexts/StudyContext';\r\nimport { ParticipantContext } from '../../Contexts/ParticipantContext';\r\nimport { LineChart, YAxis, XAxis, CartesianGrid, Line } from 'recharts';\r\nimport { Table, Segment, Button } from 'semantic-ui-react';\r\nimport { getDeviceNumberChart } from '../../utils/StudyChartUtils';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { fetchStudies } from '../../api/StudyApi';\r\nimport { fetchParticipants } from '../../api/ParticipantApi';\r\n\r\nconst renderRow = (row) => {\r\n    return(\r\n        <Table.Row>\r\n            <Table.Cell>{row.id}</Table.Cell>\r\n            <Table.Cell>{row.name}</Table.Cell>\r\n            <Table.Cell>{row.dateJoined}</Table.Cell>\r\n        </Table.Row>\r\n    )\r\n}\r\n\r\nconst StudyPage = (props) => {\r\n    const studyId = props.match.params.studyid;\r\n    \r\n    const { studies, studyDispatch } = useContext(StudyContext);\r\n    const { participants, participantDispatch } = useContext(ParticipantContext);\r\n    const currentStudy = studies.studies.filter(study => study.title === studyId)[0];\r\n    const currentParticipants = participants.participants.filter(participant => currentStudy.participants.includes(participant.id));\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (!currentStudy) {\r\n            history.push('/')\r\n        } else {\r\n            studyDispatch({type: 'FETCH_STUDIES'});\r\n            participantDispatch({type: 'FETCH_PARTICIPANTS'})\r\n            fetchStudies().then(studies => { studyDispatch({type: 'FETCH_STUDIES_SUCCESS', studies})}) \r\n            fetchParticipants().then(participants => { participantDispatch({type: 'FETCH_PARTICIPANTS_SUCCESS', participants})}) \r\n        }\r\n    }, [])\r\n\r\n    return(\r\n        currentStudy ?\r\n        (<div>\r\n            <Segment>\r\n                <Button onClick={() => history.push(`/participant/add/${studyId}`)}>ADD PARTICIPANT</Button>\r\n            </Segment>\r\n            <Segment>\r\n                <LineChart width={500} height={300} data={getDeviceNumberChart(currentStudy.startingDate, currentParticipants)}>\r\n                    <XAxis dataKey=\"date\"/>\r\n                    <YAxis/>\r\n                    <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\"/>\r\n                    <Line type=\"monotone\" dataKey=\"number\" stroke=\"#8884d8\" />\r\n                </LineChart>\r\n            </Segment>\r\n            <Segment>\r\n                <Table celled>\r\n                    <Table.Header>\r\n                        <Table.HeaderCell>PARTICIPANT ID</Table.HeaderCell>\r\n                        <Table.HeaderCell>PARTICIPANT NAME</Table.HeaderCell>\r\n                        <Table.HeaderCell>PARTICIPANT JOIN DATE</Table.HeaderCell>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {currentParticipants.map(participant => renderRow(participant))}\r\n                    </Table.Body>\r\n                </Table>\r\n            </Segment>\r\n        </div>) : (\r\n            <p>Loading</p>\r\n        )\r\n    );\r\n}\r\n\r\nexport default StudyPage;","import React, { useContext, useEffect } from 'react';\r\nimport { Container, Table,  } from 'semantic-ui-react';\r\nimport { fetchStudies } from '../../api/StudyApi';\r\nimport { fetchParticipants } from '../../api/ParticipantApi';\r\nimport { StudyContext } from '../../Contexts/StudyContext'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { ParticipantContext } from '../../Contexts/ParticipantContext';\r\n\r\nconst UserPage = () => {\r\n    const { studies, studyDispatch } = useContext(StudyContext);\r\n    const { participants, participantDispatch } = useContext(ParticipantContext);\r\n    const history = useHistory();\r\n\r\n    const goToStudy = (studyTitle) => {\r\n        history.push(`/study/${studyTitle}`);\r\n    }\r\n\r\n    const renderRow = (row) => {\r\n        return (<Table.Row onClick={() => goToStudy(row.title)}>\r\n            <Table.Cell>{row.title}</Table.Cell>\r\n            <Table.Cell>{row.startingDate}</Table.Cell>\r\n            <Table.Cell>{row.participants.length}</Table.Cell>\r\n        </Table.Row>)\r\n    }\r\n\r\n    useEffect(() => {\r\n        studyDispatch({type: 'FETCH_STUDIES'});\r\n        participantDispatch({type: 'FETCH_PARTICIPANTS'})\r\n        fetchStudies().then(studies => { studyDispatch({type: 'FETCH_STUDIES_SUCCESS', studies})}) \r\n        fetchParticipants().then(participants => { participantDispatch({type: 'FETCH_PARTICIPANTS_SUCCESS', participants})})\r\n    }, [])\r\n\r\n    return(\r\n        studies.isFetching ?\r\n        (<div><p>Loading ...</p></div>) :\r\n        (<Table celled selectable>\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    <Table.HeaderCell>Title</Table.HeaderCell>\r\n                    <Table.HeaderCell>Starting Date</Table.HeaderCell>\r\n                    <Table.HeaderCell>Number of participants</Table.HeaderCell>\r\n                </Table.Row>\r\n            </Table.Header>\r\n            <Table.Body>\r\n                {studies.studies.map(study => {\r\n                    return renderRow(study)\r\n                })}\r\n            </Table.Body>\r\n        </Table>)\r\n    );\r\n}\r\n\r\nexport default UserPage;","import React from 'react';\r\n\r\nconst Login = () => {\r\n    return(\r\n        <div>\r\n            <p>LOGIN</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import React, { useContext } from 'react';\r\nimport { Route, BrowserRouter, Switch } from 'react-router-dom';\r\nimport { Container } from 'semantic-ui-react';\r\n\r\nimport ParticipantPage from './Pages/Participant/ParticipantPage';\r\nimport AddParticipant from './Pages/Participant/AddParticipant';\r\nimport StudyPage from './Pages/Study/StudyPage';\r\nimport AddStudy from './Pages/Study/AddStudy';\r\nimport UserPage from './Pages/User/UserPage';\r\nimport Main from './Main';\r\nimport Login from './Pages/Login'\r\n\r\n\r\nconst RouterSwitch = () => {\r\n    return(\r\n        <Container>\r\n        <Switch>\r\n            <Route exact path='/stats-dashboard' render={() => <UserPage />} />\r\n            <Route path='/stats-dashboard/study/:studyid' render={(matchProps) => <StudyPage {...matchProps}/>} />\r\n            <Route exact path='/stats-dashboard/participant' render={() => <ParticipantPage />} />\r\n            <Route path='/stats-dashboard/participant/add/:studyid' render={(matchProps) => <AddParticipant {...matchProps} />} />\r\n            <Route path='/stats-dashboard/login' render={() => <Login />} />\r\n        </Switch>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default RouterSwitch;","import React from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { Menu, Sidebar } from 'semantic-ui-react';\r\n\r\nconst SideBar = () => {\r\n    const history = useHistory();\r\n\r\n    const redirectTo = (link) => { history.push(link) }\r\n\r\n    return(\r\n            <Menu pointing vertical>\r\n                <Menu.Item key='user' onClick={() => redirectTo('/')}>\r\n                    <Link to='/'>User</Link>\r\n                </Menu.Item>\r\n                <Menu.Item onClick={() => redirectTo('/study/add')}>\r\n                    <Link to='/study/add' >add study</Link>\r\n                </Menu.Item>\r\n            </Menu>\r\n    )\r\n}\r\n\r\nexport default SideBar;","import React from 'react';\r\nimport StudyContextProvider from './Contexts/StudyContext';\r\nimport ParticipantContextProvider from './Contexts/ParticipantContext';\r\nimport RouterSwitch from './routerSwitch';\r\nimport SideBar from './SideBar';\r\nimport { Segment } from 'semantic-ui-react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nconst MainComponent = () => {\r\n        return(\r\n            <BrowserRouter>\r\n                <StudyContextProvider>\r\n                    <ParticipantContextProvider>\r\n                        <Segment.Group horizontal>\r\n                            <Segment>\r\n                                <SideBar />\r\n                            </Segment>\r\n                            <Segment>\r\n                                <RouterSwitch />\r\n                            </Segment>\r\n                        </Segment.Group>\r\n                    </ParticipantContextProvider>\r\n                </StudyContextProvider>\r\n          </BrowserRouter>\r\n        )\r\n}\r\n\r\nexport default MainComponent;","import React from 'react';\n\nimport 'semantic-ui-less/semantic.less'\nimport MainComponent from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <MainComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}